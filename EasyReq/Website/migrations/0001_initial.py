# Generated by Django 4.2.20 on 2025-05-30 13:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('year', models.SmallIntegerField(default=1)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.SmallIntegerField(choices=[(0, 'הגשת אישורים'), (1, 'בקשה למועד מיוחד'), (2, 'שקלול עבודות בית בציון הסופי'), (3, 'דחיית הגשת עבודה'), (4, 'שחרור מחובת הרשמה'), (5, 'בקשה לפטור מקורס'), (6, 'ערעור על ציון'), (7, 'בקשה לפטור מעבודת הגשה'), (8, 'בקשה לפטור מדרישת קדם'), (9, 'בקשה לעזרה מיוחדת - דיקאנט'), (10, 'אחר')], default=10)),
                ('description', models.TextField()),
                ('status', models.SmallIntegerField(choices=[(0, 'ממתין'), (1, 'אושר'), (2, 'נדחה')], default=0)),
                ('pipeline_status', models.SmallIntegerField(choices=[(0, 'נשלח'), (1, 'בבדיקה'), (2, 'בטיפול'), (3, 'בהמתנה למסמכים נוספים'), (4, 'טופל - אושר'), (5, 'טופל - נדחה'), (6, 'בהמתנה')], default=0)),
                ('priority', models.SmallIntegerField(choices=[(0, 'נמוכה'), (1, 'בינונית'), (2, 'גבוהה'), (3, 'דחופה')], default=1)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('resolved_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='request_attachments/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('info', models.CharField(max_length=100)),
                ('profile_pic', models.ImageField(blank=True, default='images/profile.png', null=True, upload_to='profile_pics/')),
                ('role', models.SmallIntegerField(choices=[(0, 'Student'), (1, 'Lecturer'), (2, 'Staff'), (3, 'Deanery')], default=0)),
                ('year', models.SmallIntegerField(default=0)),
                ('courses', models.ManyToManyField(blank=True, to='Website.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Website.department')),
                ('groups', models.ManyToManyField(blank=True, related_name='website_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='website_user_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'Website_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RequestStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(0, 'נשלח'), (1, 'בבדיקה'), (2, 'בטיפול'), (3, 'בהמתנה למסמכים נוספים'), (4, 'טופל - אושר'), (5, 'טופל - נדחה'), (6, 'בהמתנה')])),
                ('notes', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_updates', to='Website.request')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Request Status Update',
                'verbose_name_plural': 'Request Status Updates',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RequestComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Website.request')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Request Comment',
                'verbose_name_plural': 'Request Comments',
                'ordering': ['created'],
            },
        ),
        migrations.AddField(
            model_name='request',
            name='assigned_to',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role__in': [1, 2, 3]}, related_name='assigned_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='request',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Website.course'),
        ),
        migrations.AddField(
            model_name='request',
            name='dept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Website.department'),
        ),
        migrations.AddField(
            model_name='request',
            name='student',
            field=models.ForeignKey(limit_choices_to={'role': 0}, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='request',
            name='viewers',
            field=models.ManyToManyField(blank=True, related_name='viewable_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='dept',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Website.department'),
        ),
        migrations.AddField(
            model_name='course',
            name='lecturers',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role': 1}, related_name='taught_courses', to=settings.AUTH_USER_MODEL),
        ),
    ]
